{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","anime","setAnime","onSubmit","e","preventDefault","length","a","type","value","onChange","target","getGifts","category","url","encodeURI","fetch","res","json","data","gifs","map","d","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","key","GifExpertApp","categories","c","ReactDOM","render","document","getElementById"],"mappings":"oMAuBeA,EArBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAcvC,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACCJ,EAAMK,OAAS,IACdP,GAAe,SAAAQ,GAAC,OAAKN,GAAL,mBAAeM,OAC/BL,EAAS,MAOb,SACI,uBAAOM,KAAK,OAAOC,MAASR,EAAOS,SALjB,SAACN,GACvBF,EAASE,EAAEO,OAAOF,a,8BCbbG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAN,EAAA,6DACdO,EADc,iDACkCC,UAAUF,GAD5C,+DAEFG,MAAMF,GAFJ,cAEdG,EAFc,gBAGGA,EAAIC,OAHP,uBAGZC,EAHY,EAGZA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAEC,GACNC,MAAOF,EAAEE,MACTV,IAAKQ,EAAEG,OAAOC,iBAAiBZ,QARnB,kBAWbM,GAXa,4CAAH,sDCCRO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAY,OAAjB,UACI,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAIA,QCuBDO,EAzBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAN,SAACA,GAAc,IAAD,EACZb,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNvB,EAASC,GACJuB,MAAK,SAAAhB,GACFc,EAAS,CACLf,KAAMC,EACNY,SAAS,SAGtB,CAACnB,IAGGoB,EDfiBI,CAAaxB,GAA9BM,EAFuB,EAEvBA,KAAMa,EAFiB,EAEjBA,QAIb,OACI,qCACI,6BAAKnB,IACJmB,GAAW,4CACX,qBAAKJ,UAAU,YAAf,SAEOT,EAAKE,KAAI,SAAAiB,GAAG,OACR,uBADa,CACZ,EAAD,2BACQA,GADR,IAEIC,IAAKD,EAAIf,eEMtBiB,EApBa,WAAO,IAAD,EAEMxC,mBAAS,CAAC,oBAFhB,mBAEvByC,EAFuB,KAEX1C,EAFW,KAK9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAEQ0C,EAAWpB,KAAI,SAAAqB,GACZ,OAAO,cAAC,EAAD,CAAmB7B,SAAY6B,GAAfA,Y,MCb9CC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ad443f68.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [anime, setAnime] = useState(''); //si no paso nada queda undifined\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(anime.length > 2){\r\n            setCategories( a => [anime, ...a]);\r\n            setAnime('');\r\n        }\r\n    }\r\n    const handleAnimeChange = (e)=>{\r\n        setAnime(e.target.value);\r\n    }\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input type=\"text\" value = {anime} onChange = {handleAnimeChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\n","\r\nexport const getGifts = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=lGIrmadItaEPtSiPnC0ljFEPjI44TEA5`;\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n    const gifs = data.map(d => {\r\n        return {\r\n            id: d.id,\r\n            title: d.title,\r\n            url: d.images.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className = \"card\">\r\n            <img src = {url} alt = {title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const {data, loading} = useFetchGifs(category);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Cargando...</p>}\r\n           { <div className=\"card-grid\">\r\n                {\r\n                    data.map(img => (//cuando no tenemos las llaves es un return implicito\r\n                        <GifGridItem\r\n                            {...img} // otra manera de pasar props\r\n                            key={img.id}\r\n                        />\r\n                    )\r\n                    )\r\n                }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifts } from \"../helpers/getGifts\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifts(category)\r\n            .then(gifs => {\r\n                setState({\r\n                    data: gifs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n\r\n    return state; //  data: [], loading:true\r\n}\r\n","import React, { useState } from 'react'; //rafce\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Attack on titan']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map(c => {\r\n                       return <GifGrid key = {c} category = {c} />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}